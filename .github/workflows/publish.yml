# Automated Publication Workflow - Stage 2: NPM & Release Publication
# Triggers when version changes are merged to main branch

name: Automated Publication

on:
  push:
    branches: [ main ]
    paths: 
      - 'package.json'
      - 'CHANGELOG.md'
  
  # Allow manual triggering for emergency publications
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to detect from package.json)'
        required: false
        type: string
      skip_npm:
        description: 'Skip NPM publication'
        required: false
        type: boolean
        default: false
      skip_github_release:
        description: 'Skip GitHub release creation'
        required: false
        type: boolean
        default: false

permissions:
  contents: write  # for creating tags and releases
  id-token: write  # for npm publish with provenance
  issues: read     # for linking issues in release notes
  pull-requests: read  # for linking PRs in release notes

env:
  NODE_ENV: production

jobs:
  detect-version-change:
    name: Detect Version Change
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has_version_change: ${{ steps.check.outputs.has_version_change }}
      current_version: ${{ steps.check.outputs.current_version }}
      previous_version: ${{ steps.check.outputs.previous_version }}
      should_publish: ${{ steps.check.outputs.should_publish }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Get current and previous commit
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check version change
        id: check
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check manual trigger override
          if [ -n "${{ github.event.inputs.version }}" ]; then
            MANUAL_VERSION="${{ github.event.inputs.version }}"
            echo "Manual trigger detected: $MANUAL_VERSION"
            echo "has_version_change=true" >> $GITHUB_OUTPUT
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "previous_version=unknown" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get version from previous commit
          git checkout HEAD~1 -- package.json 2>/dev/null || true
          if [ -f package.json ]; then
            PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          else
            PREVIOUS_VERSION="0.0.0"
          fi
          git checkout HEAD -- package.json
          
          echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Check if version changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version change detected: $PREVIOUS_VERSION ‚Üí $CURRENT_VERSION"
            echo "has_version_change=true" >> $GITHUB_OUTPUT
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "No version change detected"
            echo "has_version_change=false" >> $GITHUB_OUTPUT
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: detect-version-change
    if: needs.detect-version-change.outputs.should_publish == 'true'
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog and tags
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci --production=false
        
      - name: Generate version files
        run: npm run prebuild
        
      - name: Build for publication
        run: |
          npm run clean
          npm run build
          
      - name: Run final tests
        run: npm run test:all
        env:
          NODE_ENV: test
          
      - name: Configure git
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "action@github.com"
          
      - name: Create and push git tag
        run: |
          VERSION="${{ needs.detect-version-change.outputs.current_version }}"
          TAG_NAME="v$VERSION"
          
          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists - skipping tag creation"
          else
            echo "Creating tag $TAG_NAME"
            git tag -a "$TAG_NAME" -m "Release $VERSION

            - Automated release publication
            - NPM package: @jerfowler/agent-comm-mcp-server@$VERSION
            
            ü§ñ Generated by automated publication workflow"
            git push origin "$TAG_NAME"
            echo "‚úÖ Git tag $TAG_NAME created and pushed"
          fi
          
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.detect-version-change.outputs.current_version }}"
          PREVIOUS_VERSION="${{ needs.detect-version-change.outputs.previous_version }}"
          
          # Create release notes from CHANGELOG.md
          cat > release_notes.md << EOF
          ## üöÄ Release v$VERSION
          
          ### üìã Full Changelog
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for complete details.
          
          ### üîó Links
          
          - **NPM Package**: [@jerfowler/agent-comm-mcp-server@$VERSION](https://www.npmjs.com/package/@jerfowler/agent-comm-mcp-server/v/$VERSION)
          - **Documentation**: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
          - **Protocol Docs**: [PROTOCOL.md](https://github.com/${{ github.repository }}/blob/main/docs/PROTOCOL.md)
          
          ### üì¶ Installation
          
          \`\`\`bash
          npm install @jerfowler/agent-comm-mcp-server@$VERSION
          \`\`\`
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v$PREVIOUS_VERSION...v$VERSION
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
          echo "‚úÖ Release notes generated"
          
      - name: Create GitHub Release
        if: github.event.inputs.skip_github_release != 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.detect-version-change.outputs.current_version }}
          name: Release v${{ needs.detect-version-change.outputs.current_version }}
          bodyFile: ${{ steps.release_notes.outputs.release_notes_file }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish to NPM
        if: github.event.inputs.skip_npm != 'true'
        run: |
          VERSION="${{ needs.detect-version-change.outputs.current_version }}"
          echo "Publishing v$VERSION to NPM..."
          npm publish --access public --provenance
          echo "‚úÖ Published @jerfowler/agent-comm-mcp-server@$VERSION to NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Verify NPM publication
        if: github.event.inputs.skip_npm != 'true'
        run: |
          VERSION="${{ needs.detect-version-change.outputs.current_version }}"
          echo "Waiting for NPM propagation..."
          sleep 30
          
          # Verify the package is available
          if npm view @jerfowler/agent-comm-mcp-server@$VERSION version; then
            echo "‚úÖ NPM package verified: @jerfowler/agent-comm-mcp-server@$VERSION"
          else
            echo "‚ùå NPM package verification failed"
            exit 1
          fi
          
      - name: Publication summary
        run: |
          VERSION="${{ needs.detect-version-change.outputs.current_version }}"
          echo "üéâ Publication completed successfully!"
          echo "‚úÖ Version: v$VERSION"
          echo "‚úÖ Git Tag: Pushed"
          if [ "${{ github.event.inputs.skip_github_release }}" != "true" ]; then
            echo "‚úÖ GitHub Release: Created"
          fi
          if [ "${{ github.event.inputs.skip_npm }}" != "true" ]; then
            echo "‚úÖ NPM Package: Published and verified"
          fi
          echo ""
          echo "üì¶ Install: npm install @jerfowler/agent-comm-mcp-server@$VERSION"
          echo "üìã Release: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"

  # Notify of publication status  
  notify:
    name: Notify Publication Status
    runs-on: ubuntu-latest
    needs: [detect-version-change, publish]
    if: always() && needs.detect-version-change.outputs.should_publish == 'true'
    
    steps:
      - name: Publication Success
        if: needs.publish.result == 'success'
        run: |
          VERSION="${{ needs.detect-version-change.outputs.current_version }}"
          echo "üéâ Publication workflow completed successfully"
          echo "‚úÖ v$VERSION is now available on NPM and GitHub Releases"
          
      - name: Publication Failure
        if: needs.publish.result == 'failure'
        run: |
          echo "‚ùå Publication workflow failed"
          echo "Check the logs above for details"
          exit 1